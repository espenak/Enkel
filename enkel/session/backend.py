# This file is part of the Enkel web programming library.
#
# Copyright (C) 2007 Espen Angell Kristiansen (espen@wsgi.net)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

from random import randint
from cStringIO import StringIO
from datetime import timedelta


class NoSuchSessionError(Exception):
	""" Raised when trying to reference a session that does not
	exist. """


class SessionBackend(object):
	""" Defines the session backend interface.

	A session backend provides saving and loading of sessions.

	Autogeneration of session-id's is also placed here, because
	some backends might require more scrict rules on the id.

	@ivar timeout: The timeout of the session as a
			datetime.timedelta object.

	@cvar SID_CHARS: Characters used to autogenerate sid.
	@cvar SID_LENGTH: (max, min) length of sid when autogenerated.
	"""
	SID_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	SID_LENGTH = 30, 60

	def save(self, sid, session):
		""" Save session with id "sid".

		Must be implemented in subclasses.

		@param sid: The session id.
		@param session: A dict.
		"""
		raise NotImplementedError()

	def load(self, sid):
		""" Load session with id "sid".

		Must be implemented in subclasses.

		@raise NoSuchSessionError: on error.
		@param sid: The session id.
		"""
		raise NotImplementedError()

	def generate_sid(self):
		""" Generates a random sid from the characters in L{SID_CHARS}.
		@return: A random session id.
		"""
		length = randint(*self.SID_LENGTH)
		l = len(self.SID_CHARS) - 1
		buf = StringIO()
		for x in range(length):
			buf.write(self.SID_CHARS[randint(0, l)])
		return buf.getvalue()


def _test():
	import doctest
	doctest.testmod()

if __name__ == "__main__":
	_test()
